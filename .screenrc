#################################################
## オプション
##################################################
## 起動時に著作権表示
startup_message off

## ターミナル
#term xterm-256color

## エスケープは<C-z>
escape ^z^z
## 背景色消去
#defbce "on"

## 画面の一番下の行を反転させてハードステータス表示
hardstatus alwayslastline "%{= gk}%H[%m/%d %02c:%s] %{gW} %-w%{= wk}%n %t%{-}%+w %=%{gk}$USER@$HOSTNAME[$LANG] (%l) "

## 現在のウィンドウに対して可視ベルの設定します。
vbell off

## ハングアップしたときにscreenは自動的にデタッチ
autodetach on

## スクロールバックバッファの大きさ
defscrollback 100000

## Multi User
multiuser on
acladd matsumoto

#コピー
hardcopydir "$HOME/screenlog"
bufferfile $HOME/tmp/screen-xchg
bind V eval 'msgwait 0' copy 'stuff "g G$>"' screen 'stuff "vim +$ $HOME/tmp/screen-xchg;exit^M"' 'msgwait 1' 'echo ""'

#log
logfile "$HOME/screenlog/%H-%Y%m%d-%c-%n.log"

## シェルタイトル
#shelltitle "$ |bash"
#shelltitle '% |zsh'



#### encoding
defutf8 on
encoding utf-8
defencoding utf-8

#bind u encoding utf8
#bind e encoding eucJP
bind ^E eval 'command -c sencoding' 'echo "switch window encoding to: [u]tf8 [e]ucjp [s]jis / with env [U]tf8 [E]ucjp [S]jis"'
bind -c sencoding ^U eval 'encoding utf8'  'info'
bind -c sencoding u  eval 'encoding utf8'  'info'
bind -c sencoding ^E eval 'encoding eucjp' 'info'
bind -c sencoding e  eval 'encoding eucjp' 'info'
bind -c sencoding ^S eval 'encoding sjis'  'info'
bind -c sencoding s  eval 'encoding sjis'  'info'


#### move ####
bind ^n next

#### window ####
screen 1
termcapinfo xterm 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l'
#mousetrack on
bind '-' exec /home/kiriyama/bin/screensplit.rb

bind c eval 'screen 1'
bind q only
bind w windowlist -b


# Make 4 window with new 4 screen
bind s eval 'screen' 'screen' 'screen' 'source $HOME/.screen/4-windows.layout'
bind ^s eval 'screen' 'screen' 'screen' 'source $HOME/.screen/4-windows.layout'

# Make 4 window with no new screen
bind r eval 'source $HOME/.screen/4-windows.layout'
bind ^r eval 'source $HOME/.screen/4-windows.layout'

# Resize window
bind e eval 'command -c resize' 'echo "Resize window"'
bind ^e eval 'command -c resize' 'echo "Resize window"'
bind -c resize h eval 'command -c resize' 'resize -h -1'
bind -c resize l eval 'command -c resize' 'resize -h +1'
bind -c resize j eval 'command -c resize' 'resize -v +1'
bind -c resize k eval 'command -c resize' 'resize -v -1'
bind -c resize ^h eval 'command -c resize' 'resize -h -1'
bind -c resize ^l eval 'command -c resize' 'resize -h +1'
bind -c resize ^j eval 'command -c resize' 'resize -v +1'
bind -c resize ^k eval 'command -c resize' 'resize -v -1'



#### Layout

# Layout command prefix C-q
bind a eval 'command -c layout' 'layout show'
bind ^q eval 'command -c layout' 'layout show'
bind -c layout ^q eval 'command -c layout' 'layout show'

# Make/Remove layout
bind -c layout c eval 'command -c layout' 'layout new' 'layout show'
bind -c layout x eval 'command -c layout' 'layout remove' 'layout show'

# Modify title/number
bind -c layout T colon 'layout title '
bind -c layout N colon 'layout number '

# Go to Next/Previous layout
bind -c layout n eval 'layout next' 'layout show'
bind -c layout p eval 'layout prev' 'layout show'
bind -c layout ^N eval 'command -c layout' 'layout next' 'layout show'
bind -c layout ^P eval 'command -c layout' 'layout prev' 'layout show'

# Choose n-th layout
bind -c layout 0 eval 'command -c layout' 'layout select 0' 'layout show'
bind -c layout 1 eval 'command -c layout' 'layout select 1' 'layout show'
bind -c layout 2 eval 'command -c layout' 'layout select 2' 'layout show'
bind -c layout 3 eval 'command -c layout' 'layout select 3' 'layout show'
bind -c layout 4 eval 'command -c layout' 'layout select 4' 'layout show'
bind -c layout 5 eval 'command -c layout' 'layout select 5' 'layout show'
bind -c layout 6 eval 'command -c layout' 'layout select 6' 'layout show'
bind -c layout 7 eval 'command -c layout' 'layout select 7' 'layout show'
bind -c layout 8 eval 'command -c layout' 'layout select 8' 'layout show'
bind -c layout 9 eval 'command -c layout' 'layout select 9' 'layout show'

# Initialize layouts
bind -c layout i eval 'screen' 'screen' 'screen' 'source $HOME/.screen/all.layout'
bind -c layout ^i eval 'screen' 'screen' 'screen' 'source $HOME/.screen/all.layout'

# Reset layouts
bind -c layout r eval 'source $HOME/.screen/all.layout'
bind -c layout ^r eval 'source $HOME/.screen/all.layout'

# Set layout
bind -c layout m eval 'command -c layoutm' 'echo "0 only, l 4-windows, 2 3-win_1-top, 3 3-win_1-top, 4 monitor (1 top, 3 small bottoms), 5 split, 6 vsplit, 7.8+1win 8.6+1win"'
bind -c layoutm 0 eval 'source $HOME/.screen/only.layout'
bind -c layoutm 1 eval 'source $HOME/.screen/4-windows.layout'
bind -c layoutm 2 eval 'source $HOME/.screen/3-win_1-top.layout'
bind -c layoutm 3 eval 'source $HOME/.screen/3-win_1-left.layout'
bind -c layoutm 4 eval 'source $HOME/.screen/monitor.layout'
bind -c layoutm 5 eval 'source $HOME/.screen/split.layout'
bind -c layoutm 6 eval 'source $HOME/.screen/vsplit.layout'
bind -c layoutm 7 eval 'source $HOME/.screen/8-windows_1-command.layout'
bind -c layoutm 8 eval 'source $HOME/.screen/6-windows_1-command.layout'

# Save layout
bind -c layout s eval 'command -c layouts' 'layout show'
bind -c layouts 0 eval 'layout save 0' 'echo "save to 0"'
bind -c layouts 1 eval 'layout save 1' 'echo "save to 1"'
bind -c layouts 2 eval 'layout save 2' 'echo "save to 2"'
bind -c layouts 3 eval 'layout save 3' 'echo "save to 3"'
bind -c layouts 4 eval 'layout save 4' 'echo "save to 4"'
bind -c layouts 5 eval 'layout save 5' 'echo "save to 5"'
bind -c layouts 6 eval 'layout save 6' 'echo "save to 6"'
bind -c layouts 7 eval 'layout save 7' 'echo "save to 7"'
bind -c layouts 8 eval 'layout save 8' 'echo "save to 8"'
bind -c layouts 9 eval 'layout save 9' 'echo "save to 9"'
